package htmlComponents

import (
    "net/http"
    "strconv"

    "gofi/gofi/data/appdata"
)

script initRadioCheck(goCategoryRendering string) {
    if (goCategoryRendering == "names") {
        document.getElementById("names").checked = true
    } else {
        document.getElementById("icons").checked = true
    };
}

templ GetParam(json appdata.UserParams) {
    <!DOCTYPE html>
    <html lang="fr">
        <head>
            @Header()
            @TopScriptHTMX()
            <link rel="stylesheet" href="/fonts/style.css"/>
        </head>
        <body class="container-fluid">
            <main>
                <h1>Gérer les listes de données</h1>
                <section id="form">
                    <div id="htmxInfo">
                        <form hx-post="/param/category-rendering" 
                            hx-target="#refresh" 
                            hx-swap="innerHTML"
                            hx-sync="this:drop"
                            hx-on::after-request="if(event.detail.successful) document.getElementById('idSubmit3').remove()">
                            <div>
                                <!-- Radio buttons -->
                                <fieldset id="categoryRendering">
                                    <legend><strong><small>Affichage des catégories dans les listes</small></strong></legend>
                                    <label for="names">
                                        <input type="radio" id="names" name="ParamJSONstringData" value="names" />
                                        Noms, ex: Banque
                                    </label>
                                    <label for="icons">
                                        <input type="radio" id="icons" name="ParamJSONstringData" value="icons" />
                                        Icônes, ex: 
                                        <span class="icomoon" style="background-color: #33A6CC;">&#xe919;</span>
                                    </label>
                                </fieldset>
                                <div id="refresh"></div>
                            </div>
                            @FormSubmit("idSubmit3", "/img/icons.svg#feather-save", "Enregistrer l'option d'affichage")
                        </form>
                    </div>
                </section>
                @Nav("top", "/", "/img/icons.svg#feather-home", "Accueil", "contrast outline",
                    "/param/category", "/img/icons.svg#feather-tool", "Catégories", "contrast")
            </main>
            @BotScriptThemeSwitcher()
            @BotScriptHTMXhandleError()
            @initRadioCheck(json.CategoryRendering)
        </body>
    </html>
}

templ GetParamAccount(json appdata.UserParams) {
    <!DOCTYPE html>
    <html lang="fr">
        <head>
            @Header()
            @TopScriptHTMX()
            <link rel="stylesheet" href="/fonts/style.css"/>
        </head>
        <body class="container-fluid">
            <main>
                <h1>Gérer les comptes</h1>
                <section id="createAccSection">
                    <details>
                        <summary role="button" class="contrast">
                            <strong>Créer un nouveau compte</strong>
                        </summary>
                        <h5>Créer un compte</h5>
                        <div>
                            Minimum 2 caractères et maximum 5, caractères <code>espace</code> et <code>-</code> interdits, exemples: 
                            <small>
                                <ul>
                                    <li>
                                        <!-- green check square -->
                                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                        Crédit Agricole => "CA"
                                    </li>
                                    <li>
                                        <!-- green check square -->
                                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                        Société Générale => "SG"
                                    </li>
                                    <li>
                                        <!-- green check square -->
                                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                        Espèces => "Esp"
                                    </li>
                                    <li>
                                        <!-- red x square -->
                                        <svg width="18" height="18" viewBox="0 0 24 24" stroke="firebrick"><use xlink:href="/img/icons.svg#feather-red-x-square"></use></svg>
                                        Crédit Agricole => "C A"
                                    </li>
                                    <li>
                                        <!-- red x square -->
                                        <svg width="18" height="18" viewBox="0 0 24 24" stroke="firebrick"><use xlink:href="/img/icons.svg#feather-red-x-square"></use></svg>
                                        Crédit Agricole => "C-A"
                                    </li>
                                    <li>Les compte par défaut pour démarrer</li>
                                    <ul>
                                        <li>
                                            <!-- green check square -->
                                            <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                            Carte Bancaire => "CB"
                                        </li>
                                        <li>
                                            <!-- green check square -->
                                            <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                            Livret A => "LA"
                                        </li>
                                        <li>
                                            <!-- green check square -->
                                            <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                            Plan Epargne Action => "PEA"
                                        </li>
                                    </ul>
                                </ul>
                            </small>
                            <!-- Text -->
                            <label for="accountToCreate">
                                <!-- landmark = Compte -->
                                <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-landmark"></use></svg>
                                Intitulé du compte
                            </label>
                            <input type="text" id="accountToCreate" name="ParamJSONstringData" required />
                            <span id="infoText"></span>
                            @FormSubmit("createAccount", "/img/icons.svg#feather-save", "Créer ce compte")
                        </div>
                        <hr/>
                    </details>
                </section>
                <section id="listAndReorder">
                    <small><i>
                        Fonctionnement:
                        <ul>
                            <li>
                                <!-- landmark = Compte -->
                                <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-landmark"></use></svg>
                                intitulé du compte.
                            </li>
                            <li>
                                <!-- toggle-right -->
                                <svg stroke="currenColor" width="20" heigth="20" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-toggle-right"></use></svg>
                                bascule le compte en 
                                <!-- red x square -->
                                <svg width="18" height="18" viewBox="0 0 24 24" stroke="firebrick"><use xlink:href="/img/icons.svg#feather-red-x-square"></use></svg>
                                inactif.
                            </li>
                            <li>
                                <!-- arrow-up-down -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-arrow-up-down"></use></svg>
                                réordonne les comptes. L'ordre est utilisé dans les listes de sélection d'un compte.
                            </li>
                        </ul>
                    </i></small>
                    <table id="accountTable" class="striped">
                        @accountTable(json.AccountList)
                    </table>
                    <hr/>
                    if len(json.AccountListUnhandled) > 0 {
                        <h5>Comptes utilisés mais désactivés</h5>
                        <p>Au moins 1 enregistrement utilise un compte qui ne fait pas partie de la liste ci-dessus.</p>
                        <small><i>
                            2 possibilités:
                            <ol>
                                <li>soit on rajoute ces comptes dans la liste actuelle en le créant</li>
                                <li>soit on modifie ces comptes inconnus en comptes existants via <code>.csv</code></li>
                            </ol>
                            Pour modifier ces comptes, dans le cas 2: 
                            <ul>
                                <li>exporter les données sous format <code>.csv</code></li>
                                <li>rechercher les comptes de la liste ci-dessous</li>
                                <li>garder uniquement les lignes concernées par cette recherche dans le fichier <code>.csv</code></li>
                                <li>modifier les cas trouvés avec des comptes utilisées de la liste ci-dessus</li>
                                <li>importer le <code>.csv</code> corrigé</li>
                            </ul>
                        </i></small>
                        <div class="overflow-auto">
                            <figure>
                                <table class="striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">
                                                <!-- landmark = Compte -->
                                                <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-landmark"></use></svg>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        for _, account := range json.AccountListUnhandled {
                                            <tr><td>{ account }</td></tr>
                                        }
                                    </tbody>
                                </table>
                            </figure>
                        </div>
                        <hr/>
                    }
                    <div id="htmxInfo">
                        <form id="formAccount"
                            hx-post="/param/account" 
                            hx-trigger="onEventJs" 
                            hx-target="#accountTable" 
                            hx-swap="innerHTML"
                            hx-sync="this:drop">
                            <!-- Text -->
                            <input type="text" id="accountList" name="ParamJSONstringData" required readonly hidden />
                        </form>
                        <form id="formAccountDisable"
                            hx-post="/param/account" 
                            hx-trigger="onEventDisableJs" 
                            hx-target="#accountTable" 
                            hx-swap="innerHTML"
                            hx-sync="this:drop"
                            hx-on::after-request="if(event.detail.successful) location.reload();">
                            <!-- Text -->
                            <input type="text" id="accountListDisable" name="ParamJSONstringData" required readonly hidden />
                        </form>
                    </div>
                </section>
                @Nav("top", "/", "/img/icons.svg#feather-home", "Accueil", "contrast outline",
                    "/param/category", "/img/icons.svg#feather-tool", "Catégories", "contrast")
            </main>
            @BotScriptThemeSwitcher()
            @BotScriptHTMXhandleError()
            @botScriptAddClickEventToTableAccButtons(json.AccountList)
        </body>
    </html>
}
templ accountTable(accountList []string) {
    <thead>
        <tr>
            <th scope="col">
                <!-- landmark = Compte -->
                <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-landmark"></use></svg>
            </th>
            <th scope="col">
                <!-- inUse = ON/OFF -->
                <svg stroke="currenColor" width="32" heigth="32" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-toggle-right"></use></svg>
            </th>
            <th scope="col">
                <!-- arrow-up-down -->
                <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-arrow-up-down"></use></svg>
            </th>
        </tr>
    </thead>
    <tbody id="tableAccount">
        for i, account := range accountList {
            <tr id={ "tr-" + account }>
                <td>
                    { account }
                </td>
                <td>
                    <input type="checkbox" id={ "desactivate-" + account } role="switch" checked />
                </td>
                <td>
                    // the arrow button ID is the real name of the matching account : u = up
                    if i > 0 {
                        // don't show the arrow up on first account
                        <button id={ "u-" + account + "-" + accountList[i-1] } class="round-button small-padding">
                            <!-- lucide-arrow-up -->
                            <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-arrow-up"></use></svg>
                        </button>
                    }
                </td>
            </tr>
        }
    </tbody>
}
script botScriptAddClickEventToTableAccButtons(accountList []string) {
    var accountList = { accountList };
    var accountArray = accountList.accountList;
    // this part of the script adds click events to create account
    document.getElementById("createAccount").addEventListener('click', function(c){
        var accountToCreate = document.getElementById("accountToCreate").value.trim();
        // console.log("accountArray: " + accountArray);
        // console.log("accountToCreate: " + accountToCreate);
        if (accountToCreate.length > 0) {
            switch(true) {
                case (accountToCreate.length < 2):
                    console.log("Requête annulée car nombre de caractères inférieur à 2.");
                    document.getElementById('infoText').innerHTML = "Impossible de créer un compte avec moins de 2 caractères.";
                    break;
                case (accountToCreate.length > 5):
                    console.log("Requête annulée car nombre de caractères supérieur à 5.");
                    document.getElementById('infoText').innerHTML = "Impossible de créer un compte avec plus de 5 caractères.";
                    break;
                case (accountToCreate.includes("-")):
                    console.log("Requête annulée car caractères - interdit.");
                    document.getElementById('infoText').innerHTML = "Impossible de créer un compte le caractères -";
                    break;
                case (accountToCreate.includes(" ")):
                    console.log("Requête annulée car caractères espace interdit.");
                    document.getElementById('infoText').innerHTML = "Impossible de créer un compte avec le caractères espace";
                    break;
                case (accountArray.includes(accountToCreate)):
                    console.log("Requête annulée car nom de compte déjà existant.");
                    document.getElementById('infoText').innerHTML = "Impossible de créer un compte déjà existant.";
                    break;
                default:
                    accountArray.push(accountToCreate);
                    document.getElementById("accountList").value = accountArray.toString();
                    htmx.trigger("#formAccount", "onEventJs");
                    document.getElementById('infoText').innerHTML = "Compte créé.";
            };
            document.getElementById("accountToCreate").value = "";
            setTimeout(function() { document.getElementById('infoText').innerHTML = ""; }, 3000);
        };
    });
    // this part of the script adds click events to reorder accounts with buttons under tables
    var childArrowButtons = document.getElementById('tableAccount').getElementsByTagName('button');
    const swapPositions = (array, a ,b) => {
        [array[a], array[b]] = [array[b], array[a]];
    };
    for (var i = 0; i < childArrowButtons.length; i++) {
        strButtonId = childArrowButtons[i].id;
        // up arrow, patch the category to reorder it up 1 time
        document.getElementById(strButtonId).addEventListener('click', function(r){
            bID1 = this.id.split("-")[1];
            bID2 = this.id.split("-")[2];
            swapPositions(accountArray,accountArray.indexOf(bID1),accountArray.indexOf(bID2));
            // console.log(accountArray);
            document.getElementById("accountList").value = accountArray.toString();
            htmx.trigger("#formAccount", "onEventJs");
        });
    };
    // this part of the script adds click events to disable accounts with switches under tables
    var childSwitches = document.getElementById('tableAccount').getElementsByTagName('input');
    for (var i = 0; i < childSwitches.length; i++) {
        var inputIdA = childSwitches[i].id;
        // switch on => off, disable the account
        document.getElementById(inputIdA).addEventListener('click', function(d){
            strIdA = this.id;
            idActiveAccountInput = strIdA.split("-")[1];
            const index = accountArray.indexOf(idActiveAccountInput);
            if (index > -1) { // only splice array when item is found
                accountArray.splice(index, 1); // 2nd parameter means remove one item only
            }
            document.getElementById("accountListDisable").value = accountArray.toString();
            htmx.trigger("#formAccountDisable", "onEventDisableJs");
            // document.getElementById('tr-'+idActiveAccountInput).remove();
            // page reload 
        });
    };
}
templ PostParamAccount(httpStatus int, ParamJSONstringData string, AccountList []string) {
    switch httpStatus {
        case http.StatusOK:
            @accountTable(AccountList)
            @botScriptAddClickEventToTableAccButtons(AccountList)
            // <input type="text" id="accountList" name="ParamJSONstringData" value={ParamJSONstringData} aria-invalid="false" disabled />
        case http.StatusBadRequest:
            <p>
                ERREUR1: Impossible de modifier la liste des comptes.<br/> 
                Requête annulée, merci de recommencer.
            </p>
            @PageRefreshButton()
        case http.StatusInternalServerError:
            <p>
                ERREUR2: Impossible de modifier la liste des comptes.<br/> 
                Requête annulée, merci de recommencer.
            </p>
            @PageRefreshButton()
        default:
            <p>
                ERREUR3: Impossible de modifier la liste des comptes.<br/> 
                Requête annulée, merci de recommencer.
            </p>
            @PageRefreshButton()
	}
}
templ PutParamCategory() {

}
templ PatchParamCategoryInUse() {
    
}
templ PatchParamCategoryOrder(jsonUC *appdata.UserCategories) {
    @categoryTable(jsonUC)
    @botScriptAddClickEventToTableCatButtons()
}
templ PostParamCategoryRendering(httpStatus int, ParamJSONstringData string) {
    switch httpStatus {
        case http.StatusOK:
            // nothing
        case http.StatusBadRequest:
            <p>
                ERREUR1: Impossible de modifier l'option d'affichage des catégories.<br/> 
                Requête annulée, merci de recommencer.
            </p>
        case http.StatusInternalServerError:
            <p>
                ERREUR2: Impossible de modifier l'option d'affichage des catégories.<br/> 
                Requête annulée, merci de recommencer.
            </p>
        default:
            <p>
                ERREUR3: Impossible de modifier l'option d'affichage des catégories.<br/> 
                Requête annulée, merci de recommencer.
            </p>
	}
    @PageRefreshButton()
}

templ GetParamCategory(jsonUC *appdata.UserCategories, userCategoriesJson string, unhandledCategoryList []string) {
    <!DOCTYPE html>
    <html lang="fr">
        <head>
            @Header()
            @TopScriptHTMX()
            <link rel="stylesheet" href="/fonts/style.css"/>
        </head>
        <body class="container-fluid">
            <main>
                <h1>Gérer les catégories</h1>
                <!-- alert-triangle -->
                <svg width="24" height="24" viewBox="0 0 24 24" stroke="#FFC000"><use xlink:href="/img/icons.svg#feather-alert-triangle"></use></svg>
                Lors de l'activation/désactivation d'une catégorie, elle disparait de la page, merci de rafraîchir la page pour la voir réapparaître.
                <hr/>

                <section id="openForm" name="openForm" hidden>
                    <div id="htmxInfo"> <!-- via header: "HX-Retarget", "#htmxInfo" -->
                        <form name="mainForm">

                            <h5>Editer la catégorie</h5>
                            <span id="categoryIcon1" class="icomoon e900">&#xe900;</span>
                            &nbsp;<span id="categoryName">Catégorie</span>
                            <hr/>

                            <strong>Affichage par défaut dans les statistiques</strong>
                            <label for="defaultInStats">
                                Masquer
                                <!-- red x square -->
                                <svg width="24" height="24" viewBox="0 0 24 24" stroke="firebrick"><use xlink:href="/img/icons.svg#feather-x-square"></use></svg>
                                <input type="checkbox" id="defaultInStats" name="InStatsStr" role="switch" checked />
                                <!-- green check square -->
                                <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                Afficher
                            </label>
                            <hr/>

                            <!-- Select -->
                            <label for="catWhereToUse">
                                <!-- locate -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-locate"></use></svg>
                                Où utiliser cette catégorie
                            </label>
                            <select id="catWhereToUse" name="Type" required>
                                <option value="all">Partout</option>
                                <option value="basic">Enregistrement standard</option>
                                <option value="periodic">Enr. régulier/périodique</option>
                            </select>

                            <!-- Text -->
                            <label for="description">
                                <!-- text = Category type -->
                                <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-text"></use></svg>
                                Description
                            </label>
                            <textarea id="description" name="Description" rows="2"></textarea>
                            <hr/>

                            <h5>Budget lié à la catégorie</h5>
                            <small><i>
                                Fonctionnement:
                                <ul>
                                    <li>
                                        <!-- wallet -->
                                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-wallet"></use></svg>
                                        type "Réinitialiser": 
                                        <ul>
                                            <li>fixe un budget sur une période et redémarre à 0 la suivante</li>
                                            <li>
                                                <!-- calendar = Date -->
                                                <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-calendar"></use></svg>
                                                la date ne sert pas pour ce cas
                                            </li>
                                        </ul>
                                    </li>
                                    <li>
                                        <!-- wallet -->
                                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-wallet"></use></svg>
                                        type "Cumulé":
                                        <ul>
                                            <li>garde le relicat en fin de période et l'ajoute à la suivante</li>
                                            <li>
                                                <!-- calendar = Date -->
                                                <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-calendar"></use></svg>
                                                la date utilisée sert à calculer le nombre de période à cumuler
                                            </li>
                                        </ul>
                                    </li>
                                </ul>
                            </i></small>

                            <fieldset role="group">
                                <div>
                                    <!-- Select -->
                                    <label for="budgetType">
                                        <!-- wallet -->
                                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-wallet"></use></svg>
                                        Type
                                    </label>
                                    <select id="budgetType" name="BudgetType" required>
                                        <option value="-">-</option>
                                        <option value="reset">Réinitialiser</option>
                                        <option value="cumulative">Cumulé</option>
                                    </select>
                                </div>
                                <div><!-- separator --></div>
                                <div>
                                    @dateInput("", "BudgetCurrentPeriodStartDate")
                                </div>
                            </fieldset>

                            <fieldset role="group">
                                <div>
                                    <!-- Select -->
                                    <label for="budgetPeriod">
                                        <!-- refresh clockwise -->
                                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-refresh-cw"></use></svg>
                                        Période
                                    </label>
                                    <select id="budgetPeriod" name="BudgetPeriod">
                                        <option value="-">-</option>
                                        <option value="mensuelle">Mensuelle</option>
                                        <option value="annuelle">Annuelle</option>
                                        <option value="hebdomadaire">Hebdomadaire</option>
                                    </select>
                                </div>
                                <div><!-- separator --></div>
                                <div>
                                    <!-- Number -->
                                    <label for="budgetPrice">
                                        <!-- banknote = Montant -->
                                        <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-banknote"></use></svg>
                                        Montant
                                    </label>
                                    <input type="number" id="budgetPrice" name="BudgetPriceStr" min="0" max="100000" step="1" />
                                </div>
                            </fieldset>

                            <!-- Text -->
                            <input type="text" id="idRRmain" name="IDstr" value="0" hidden readonly required />
                            <!-- Buttons -->
                            <button id="editRR"
                                type="submit" value="Submit"
                                hx-put="/param/category" 
                                hx-target="#infoMainForm" 
                                hx-sync="this:drop"
                                hx-indicator="#spinnerB"
                                hx-on::after-request="if(event.detail.successful) location.reload();">
                                <span id="spinnerB" class="htmx-indicator" aria-busy="true"></span>
                                <!-- edit -->
                                <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-edit"></use></svg>
                                Editer la catégorie 
                                <span id="categoryIcon2" class="icomoon e900">&#xe900;</span>
                            </button>
                            <hr/>
                        </form>
                        <span id="infoMainForm"></span>
                    </div> <!-- via header: "HX-Retarget", "#htmxInfo" -->
                </section>

                <section id="categories">
                    <h5>
                        <!-- green check square -->
                        <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                        Catégories actives configurables
                    </h5>
                    <small><i>
                        Fonctionnement:
                        <ul>
                            <li>
                                <!-- toggle-right -->
                                <svg stroke="currenColor" width="20" heigth="20" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-toggle-right"></use></svg>
                                bascule la catégorie partie 
                                <!-- red x square -->
                                <svg width="18" height="18" viewBox="0 0 24 24" stroke="firebrick"><use xlink:href="/img/icons.svg#feather-x-square"></use></svg>
                                inactive
                            </li>
                            <li>
                                <!-- wallet -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-wallet"></use></svg>
                                mode budget: montant | inactif 
                                <!-- red x square -->
                                <svg width="18" height="18" viewBox="0 0 24 24" stroke="firebrick"><use xlink:href="/img/icons.svg#feather-x-square"></use></svg>
                            </li>
                            <li>
                                <!-- edit -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-edit"></use></svg>
                                permet d'éditer la catégorie.
                            </li>
                            <li>
                                <!-- arrow-up-down -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-arrow-up-down"></use></svg>
                                réordonne les catégories. L'ordre est utilisé dans les listes de sélection d'une catégorie.
                            </li>
                        </ul>
                    </i></small>

                    <div class="overflow-auto">
                        <figure>
                            <table id="activeCategoryTable" class="striped">
                                @categoryTable(jsonUC)
                            </table>
                        </figure>
                    </div>
                    <form id="formPatchInUseCategory" 
                        hx-trigger="onCheckboxSwitch"
                        hx-patch="/param/category/in-use" 
                        hx-swap="none"
                        hx-sync="this:drop">
                        <!-- Text -->
                        <input type="text" id="formPatchCategoryID" name="IDstr" value="0" hidden readonly required />
                        <input type="text" id="formPatchCategoryInUse" name="InUseStr" value="2" hidden readonly required />
                    </form>
                    <form id="formPatchOrderCategory" 
                        hx-trigger="onArrowClick"
                        hx-patch="/param/category/order" 
                        hx-swap="innerHTML"
                        hx-target="#activeCategoryTable" 
                        hx-sync="this:drop">
                        <!-- Text -->
                        <input type="text" id="formPatchCategoryID1order" name="ID1str" value="0" hidden readonly required />
                        <input type="text" id="formPatchCategoryID2order" name="ID2str" value="0" hidden readonly required />
                    </form>
                    <hr/>
                    if len(unhandledCategoryList) > 0 {
                        <h5>Catégories utilisées inconnus</h5>
                        <small><i>
                            Pour corriger ces catégories: 
                            <ul>
                                <li>exporter les données sous format <code>.csv</code></li>
                                <li>rechercher les catégories de la liste ci-dessous</li>
                                <li>garder uniquement les lignes concernées par cette recherche dans le fichier <code>.csv</code></li>
                                <li>modifier les cas trouvés avec des catégories utilisées de la liste ci-dessus</li>
                                <li>importer le <code>.csv</code> corrigé</li>
                            </ul>
                        </i></small>
                        <div class="overflow-auto">
                            <figure>
                                <table class="striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">
                                                <!-- boxes = Catégorie -->
                                                <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-tag"></use></svg>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        for _, category := range unhandledCategoryList {
                                            <tr><td>{ category }</td></tr>
                                        }
                                    </tbody>
                                </table>
                            </figure>
                        </div>
                        <hr/>
                    }
                    <h5>
                        <!-- red x square -->
                        <svg width="18" height="18" viewBox="0 0 24 24" stroke="firebrick"><use xlink:href="/img/icons.svg#feather-x-square"></use></svg>
                        Catégories inactives
                    </h5>
                    <small><i>
                        Fonctionnement:
                        <ul>
                            <li>
                                <!-- toggle-right -->
                                <svg stroke="currenColor" width="20" heigth="20" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-toggle-right"></use></svg>
                                bascule la catégorie partie 
                                <!-- green check square -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                active
                            </li>
                        </ul>
                    </i></small>
                    <div class="overflow-auto">
                        <figure>
                            <table class="striped">
                                @categoryTableInactive(jsonUC)
                            </table>
                        </figure>
                    </div>
                    <hr/>
                    <h5>Catégories système</h5>
                    <div class="overflow-auto">
                        <figure>
                            <table class="striped">
                                @categoryTableSystem(jsonUC)
                            </table>
                        </figure>
                    </div>
                </section>
                <textarea id="struct-complet" hidden readonly>{ userCategoriesJson }</textarea>
                @Nav("top", "/", "/img/icons.svg#feather-home", "Accueil", "contrast outline",
                    "/budget", "/img/icons.svg#lucide-wallet", "Budgets", "contrast")
            </main>
            @BotScriptThemeSwitcher()
            @BotScriptHTMXhandleError()
            @botScriptAddClickEventToTableCatButtons()
        </body>
    </html>
}

script botScriptAddClickEventToTableCatButtons() {
    window.onbeforeunload = function () {
        window.scrollTo(0, 0);
    }

    // this script adds click events for buttons under tables
    var childButtons = document.getElementById('tableActiveCat').getElementsByTagName('button');
    var childActiveInputs = document.getElementById('tableActiveCat').getElementsByTagName('input');
    var childInactiveInputs = document.getElementById('tableInactiveCat').getElementsByTagName('input');    
    for (var i = 0; i < childButtons.length; i++) {
        strButtonId = childButtons[i].id;
        buttonType = strButtonId.split("-")[0];
        // for buttons: e = edit, u = up, d = down
        switch(buttonType) {
            case "e":
                // edit button, paste the info in the form to edit whole thing
                document.getElementById(strButtonId).addEventListener('click', function(e){
                    bIndex = this.id.split("-")[1];
                    bID = this.id.split("-")[2];
                    document.getElementById('openForm').hidden = false;
                    document.getElementById('idRRmain').value = bID;
                    document.getElementById('infoMainForm').innerHTML = "";
                    userCategoriesJsonString = document.getElementById("struct-complet").value;
                    userCategories = JSON.parse(userCategoriesJsonString);
                    // console.log(userCategories.Categories[bIndex]);
                    document.getElementById('categoryIcon1').innerHTML = "&#x" + userCategories.Categories[bIndex].IconCodePoint + ";";
                    bgclass = document.getElementById('categoryIcon1').classList.item(1);
                    document.getElementById('categoryIcon1').classList.remove(bgclass);
                    document.getElementById('categoryIcon1').classList.add(userCategories.Categories[bIndex].IconCodePoint);
                    document.getElementById('categoryIcon2').innerHTML = "&#x" + userCategories.Categories[bIndex].IconCodePoint + ";";
                    bgclass = document.getElementById('categoryIcon2').classList.item(1);
                    document.getElementById('categoryIcon2').classList.remove(bgclass);
                    document.getElementById('categoryIcon2').classList.add(userCategories.Categories[bIndex].IconCodePoint);
                    document.getElementById('categoryName').innerHTML = "&nbsp;" + userCategories.Categories[bIndex].Name;
                    if (userCategories.Categories[bIndex].InStats == 1) {
                        document.getElementById('defaultInStats').checked = true;
                    } else {
                        document.getElementById('defaultInStats').checked = false;
                    };
                    document.getElementById('catWhereToUse').value = userCategories.Categories[bIndex].Type;
                    document.getElementById('description').innerHTML =  userCategories.Categories[bIndex].Description;
                    document.getElementById('budgetType').value =  userCategories.Categories[bIndex].BudgetType;
                    dateValue = userCategories.Categories[bIndex].BudgetCurrentPeriodStartDate;
                    if (dateValue.substr(0, 4) == "9999") {dateValue = "";};
                    document.getElementById('BudgetCurrentPeriodStartDate').value =  dateValue;
                    document.getElementById('budgetPeriod').value =  userCategories.Categories[bIndex].BudgetPeriod;
                    document.getElementById('budgetPrice').value =  userCategories.Categories[bIndex].BudgetPrice;
                    document.getElementById('openForm').scrollIntoView({behavior: 'smooth'});
                });
                break;
            case "u":
                // up arrow, patch the category to reorder it up 1 time
                document.getElementById(strButtonId).addEventListener('click', function(e){
                    bID1 = this.id.split("-")[1];
                    bID2 = this.id.split("-")[2];
                    document.getElementById('formPatchCategoryID1order').value = bID1;
                    document.getElementById('formPatchCategoryID2order').value = bID2;
                    htmx.trigger("#formPatchOrderCategory", "onArrowClick");
                });
                break;
        };
    };
    for (var i = 0; i < childActiveInputs.length; i++) {
        var inputIdA = childActiveInputs[i].id;
        // switch on => off, patch the category to desactivate it
        document.getElementById(inputIdA).addEventListener('click', function(e){
            strIdA = this.id;
            idActiveCategoryInput = strIdA.split("-")[1];
            document.getElementById('formPatchCategoryID').value = idActiveCategoryInput;
            document.getElementById('formPatchCategoryInUse').value = "0";
            htmx.trigger("#formPatchInUseCategory", "onCheckboxSwitch");
            document.getElementById('tr-'+idActiveCategoryInput).remove();
        });
    };
    for (var i = 0; i < childInactiveInputs.length; i++) {
        var inputIdI = childInactiveInputs[i].id;
        // switch off => on, patch the category to activate it
        document.getElementById(inputIdI).addEventListener('click', function(e){
            strIdI = this.id
            idInactiveCategoryInput = strIdI.split("-")[1];
            document.getElementById('formPatchCategoryID').value = idInactiveCategoryInput;
            document.getElementById('formPatchCategoryInUse').value = "1";
            // console.log("id: " + (idInactiveCategoryInput).toString());
            htmx.trigger("#formPatchInUseCategory", "onCheckboxSwitch");
            document.getElementById('tr-'+idInactiveCategoryInput).remove();
        });
    };
}

templ categoryTable(jsonUC *appdata.UserCategories) {
    <thead>
        <tr>
            <th scope="col">
                <!-- boxes = Catégorie -->
                <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-tag"></use></svg>
            </th>
            <th scope="col">
                <!-- inUse = ON/OFF -->
                <svg stroke="currenColor" width="32" heigth="32" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-toggle-right"></use></svg>
            </th>
            <th scope="col">
                <!-- lucide-wallet = BudgetPrice -->
                <svg width="28" height="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-wallet"></use></svg>
            </th>
            <th scope="col">
                <!-- edit -->
                <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-edit"></use></svg>
            </th>
            <th scope="col">
                <!-- arrow-up-down -->
                <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-arrow-up-down"></use></svg>
            </th>
        </tr>
    </thead>
    <tbody id="tableActiveCat">
        for i, category := range jsonUC.Categories {
            if category.Type != "specific" && category.InUse == 1 {
                <tr id={ "tr-" + strconv.Itoa(category.ID) }>
                    <td>
                        <span class={ "icomoon", category.IconCodePoint }>&#x{ category.IconCodePoint };</span>
                        <br/>
                        <small>{ category.Name }</small>
                    </td>
                    <td>
                        <input type="checkbox" id={ "desactivate-" + strconv.Itoa(category.ID) } role="switch" checked />
                    </td>
                    <td>
                        if (category.BudgetPrice > 0) {
                            { strconv.Itoa(category.BudgetPrice) }
                        } else {
                            <!-- red x square -->
                            <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-red-x-square"></use></svg>
                        }
                    </td>
                    <td>
                        // the edit button ID is the index of the corresponding element in the JSON : e = edit
                        <button id={ "e-" + strconv.Itoa(i) + "-" + strconv.Itoa(category.ID) } class="small-padding">
                            <!-- edit -->
                            <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-edit"></use></svg>
                        </button>
                    </td>
                    <td>
                        // the arrow button ID is the real ID of the matching category : u = up
                        if i > 0 {
                            // don't show the arrow up on first category
                            <button id={ "u-" + strconv.Itoa(category.ID) + "-" + strconv.Itoa(jsonUC.Categories[i-1].ID) } class="round-button small-padding">
                                <!-- lucide-arrow-up -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-arrow-up"></use></svg>
                            </button>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
}

templ categoryTableInactive(jsonUC *appdata.UserCategories) {
    <thead>
        <tr>
            <th scope="col">
                <!-- boxes = Catégorie -->
                <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-tag"></use></svg>
            </th>
            <th scope="col">
                <!-- inUse = ON/OFF -->
                <svg stroke="currenColor" width="32" heigth="32" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-toggle-right"></use></svg>
            </th>
        </tr>
    </thead>
    <tbody id="tableInactiveCat">
        for _, category := range jsonUC.Categories {
            if category.InUse == 0 {
                <tr id={ "tr-" + strconv.Itoa(category.ID) }>
                    <td>
                        <span class={ "icomoon", category.IconCodePoint }>&#x{ category.IconCodePoint };</span>
                        { category.Name }
                    </td>
                    <td>
                        <input type="checkbox" id={ "activate-" + strconv.Itoa(category.ID) } role="switch" />
                    </td>
                </tr>
            }
        }
    </tbody>
}
templ categoryTableSystem(jsonUC *appdata.UserCategories) {
    <thead>
        <tr>
            <th scope="col">
                <!-- boxes = Catégorie -->
                <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-tag"></use></svg>
            </th>
            <th scope="col">
                <!-- text = Designation -->
                <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-text"></use></svg>
            </th>
        </tr>
    </thead>
    <tbody>
        for _, category := range jsonUC.Categories {
            if category.Type == "specific" {
                <tr>
                    <td>
                        <span class={ "icomoon", category.IconCodePoint }>&#x{ category.IconCodePoint };</span>
                        <br/>
                        <small>{ category.Name }</small>
                    </td>
                    <td><small>{ category.Description }</small></td>
                </tr>
            }
        }
    </tbody>
}
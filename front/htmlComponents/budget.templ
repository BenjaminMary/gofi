package htmlComponents

import (
    "strconv"
    "gofi/gofi/data/appdata"
)

templ GetBudget(Year int, uc *appdata.UserCategories) {
    <html>
        <head>
            @Header()
            // @TopScriptHTMX()
            <link rel="stylesheet" href="/fonts/style.css"/>
        </head>
        <body class="container-fluid">
            <main>
                <h1>Budgets</h1>
                
                <section id="budgets">
                    for _, category := range uc.Categories {
                        <p>
                            <span class={ "icomoon", category.IconCodePoint }>&#x{ category.IconCodePoint };</span>
                            { category.Name } ({ category.BudgetPeriod }-{ category.BudgetType })
                        </p>
                        if category.BudgetType == "reset" {
                            Période: du { category.BudgetPreviousPeriodStartDate } au { category.BudgetPreviousPeriodEndDate }<br/>
                            Montant dépensé/budgété: { category.BudgetPreviousAmount } / { strconv.Itoa(category.BudgetPrice) }
                            <meter value={ category.BudgetPreviousAmount } optimum={ strconv.Itoa(category.BudgetPrice/2) } 
                                low={ strconv.Itoa(category.BudgetPrice*3/4) } high={ strconv.Itoa(category.BudgetPrice-1) } max={ strconv.Itoa(category.BudgetPrice) } />
                            -<br/>
                        }
                        Période: du { category.BudgetCurrentPeriodStartDate } au { category.BudgetCurrentPeriodEndDate }<br/>
                        Montant dépensé/budgété: { category.BudgetAmount } / { strconv.Itoa(category.BudgetPrice) }
                        <meter value={ category.BudgetAmount } optimum={ strconv.Itoa(category.BudgetPrice/2) } 
                            low={ strconv.Itoa(category.BudgetPrice*3/4) } high={ strconv.Itoa(category.BudgetPrice-1) } max={ strconv.Itoa(category.BudgetPrice) } />
                        // -<br/>
                        // test
                        // <meter min="0" optimum="65" low="70" high="99" max="100" value="60" /> //green
                        // <meter min="0" optimum="65" low="70" high="99" max="100" value="75" /> //orange
                        // <meter min="0" optimum="65" low="70" high="99" max="100" value="100" /> //red
                        <hr/>
                    }
                    // TODO: Voir pour calculer un revenu moyen en hebdo/mensuel/annuel et afficher les dépenses en cours hebdo/mensuel/annuel
                </section>
                @Nav("top", "/", "/img/icons.svg#feather-home", "Accueil", "contrast outline",
                    "/param/category", "/img/icons.svg#feather-tool", "Catégories", "contrast")
            </main>
            @BotScriptThemeSwitcher()
            // @BotScriptHTMXhandleError()
        </body>
    </html>
}

templ GetLenderBorrowerStats(lbList []appdata.LenderBorrower, ftList1 []appdata.FinanceTracker, ftList2 []appdata.FinanceTracker, lbName string, lbIDint int) {
    <html>
        <head>
            @Header()
            // @TopScriptHTMX()
            <link rel="stylesheet" href="/fonts/style.css"/>
        </head>
        <body class="container-fluid">
            <main>
                <h1>Stats Prêt / Emprunt</h1>
                
                // list all lenders and borrowers with associated amounts lent + borrowed and refunded 
                <section id="lenderBorrower">
                    <small><i>
                        Fonctionnement:
                        <ul>
                            <li>
                                <!-- text = Designation -->
                                <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-text"></use></svg>
                                nom de la personne / société concernée.
                            </li>
                            <li>
                                <!-- hand coins -->
                                <svg width="18" height="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-hand-coins"></use></svg>
                                montant prêté / emprunté.
                            </li>
                            <li>
                                <!-- banknote = Prix -->
                                <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-banknote"></use></svg>
                                montant déjà récupéré / remboursé.
                            </li>
                        </ul>
                    </i></small>
                    @lenderBorrowerTable(lbList, lbIDint)
                    <hr/>
                </section>
                <section id="lendBorrowDetails">
                    <h2>Détails de: "<span id="lbActive">{ lbName }</span>"</h2>
                    <hr/>
                    <h3>Détails prêt et emprunts</h3>
                    @lastInsertedRowsTable(ftList1, false, "")
                    <hr/>
                    <h3>Détails remboursements</h3>
                    @lastInsertedRowsTable(ftList2, false, "")
                </section>
                @Nav("top", "/", "/img/icons.svg#feather-home", "Accueil", "contrast outline",
                    "/record/lend-or-borrow", "/img/icons.svg#lucide-hand-coins", "Prêt/Emprunt", "contrast")

                <section hidden>
                    <form id="form" name="form" action="/stats/lender-borrower/0" method="get"></form>
                </section>

            </main>
            @BotScriptThemeSwitcher()
            // @BotScriptHTMXhandleError()
            @selectionSwitchLB()
        </body>
    </html>
}

script selectionSwitchLB() {
    // this script handle a selection switch on the LB main table to show details of this line in the 2 other tables 
    var checkboxesList = document.getElementById('lbTableRows').getElementsByTagName('input');
    for (var i = 0; i < checkboxesList.length; i++) {
        document.getElementById(checkboxesList[i].id).addEventListener('click', function(e){
            if (this.checked) {
                // changes only if the state switch from off to on
                // refresh the page with the requested id to get the matching details
                document.getElementById('form').action = "/stats/lender-borrower/"+this.id.split("-")[1];
                document.getElementById("form").submit();
            };
        });
    };
}


templ lenderBorrowerTable(lbListSent []appdata.LenderBorrower, lbIDint int) {
    <div class="overflow-auto">
        <figure>
            <table class="striped">
                <thead>
                    <tr>
                        <th scope="col">
                            <!-- text = Designation -->
                            <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-text"></use></svg>
                        </th>
                        <th scope="col">
                            <!-- inUse = ON/OFF -->
                            <svg stroke="currenColor" width="32" heigth="32" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-toggle-right"></use></svg>
                        </th>
                        <th scope="col">
                            <!-- hand coins -->
                            <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-hand-coins"></use></svg>
                        </th>
                        <th scope="col">
                            <!-- banknote = Prix -->
                            <svg stroke="currenColor" width="28" heigth="28" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-banknote"></use></svg>
                        </th>
                    </tr>
                </thead>
                <tbody id="lbTableRows">
                    for _, lb := range lbListSent {
                        @oneRowInLenderBorrowerTable(lb, lbIDint)
                    }
                </tbody>
            </table>
        </figure>
    </div>
}

templ oneRowInLenderBorrowerTable(lb appdata.LenderBorrower, lbIDint int) {
    <tr>
        <td>{lb.Name}</td>
        <td>
            if lbIDint == lb.ID {
                <input type="checkbox" id={ "checkbox-" + strconv.Itoa(lb.ID) } role="switch" checked />
            } else {
                <input type="checkbox" id={ "checkbox-" + strconv.Itoa(lb.ID) } role="switch" />
            }
        </td>
        <td>{lb.AmountLentBorrowedStr2Decimals}</td>
        <td>{lb.AmountSentReceivedStr2Decimals}</td>
    </tr>
}
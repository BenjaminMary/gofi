package htmlComponents

import (
    "strconv"
)

templ GetStats(Year int, 
    TotalAccount []string, TotalCategory []string,
    AccountList [][]string, CategoryList [][]string,
    Checked bool,
    CategoryLabelList []string, CategoryValueList []float64, IconCodePointList []string, ColorHEXList []string,
    ApexChartStatsJson string) {
    <html>
        <head>
            @Header()
            // @TopScriptHTMX()
            <link rel="stylesheet" href="/fonts/style.css"/>
        </head>
        <body class="container-fluid">
            <main>
                <h1>Statistiques</h1>
                <section>
                    <form id="form" name="form" action="/stats/false-0" method="get">
                        <div class="grid">
                            <div>
                                <b>Mode d'affichage des données</b><br/>
                                if Checked {
                                    <span id="mode">Le mode <code>Données validées</code> est activé.</span>
                                } else {
                                    <span id="mode">Le mode <code>Toutes les données</code> est activé.</span>
                                }
                                <label for="switchMode">
                                    Toutes
                                    <!-- plus square -->
                                    <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-plus-square"></use></svg>
                                    if Checked {
                                        <input type="checkbox" id="switchMode" name="switchMode" role="switch" checked />
                                    } else {
                                        <input type="checkbox" id="switchMode" name="switchMode" role="switch" />
                                    }
                                    <!-- green check square -->
                                    <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#feather-green-check-square"></use></svg>
                                    Validées uniquement
                                </label><br/> <!-- br for smartphone UI -->
                            </div>
                            <div>
                                <!-- Number -->
                                <label for="annee"><b>Année</b></label>
                                <input type="number" id="annee" name="annee" min="1900" max="2200" step="1" value={ strconv.Itoa(Year) } />
                            </div>
                        </div>
                    </form>
                </section>

                <section id="account-stats">
                    <div class="overflow-auto">
                        <figure>
                            <h5>Détail des Comptes</h5>
                            <table class="striped">
                                <thead>
                                    <tr>
                                        <th scope="col">Compte</th>
                                        <th scope="col" class="right">Prix</th>
                                        <th scope="col" class="right">Quantite</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    for _, itemList := range AccountList {
                                        <tr>
                                            <td>{ itemList[0] }</td>
                                            <td class="right">{ itemList[1] }</td>
                                            <td class="right">{ itemList[2] }</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>TOTAUX</td>
                                        for _, item := range TotalAccount {
                                            <td class="right">{ item }</td>
                                        }
                                    </tr>
                                </tfoot>
                            </table>
                        </figure>
                    </div>
                </section>

                <section id="graph-expenses">
                    <h5>Principales dépenses par Catégorie</h5>
                    <div class="container-apex-chart">
                        <div id="responsive-apex-chart"></div>
                    </div>

                    <!-- Number -->
                    <label for="group-category">
                        <!-- banknote = Montant -->
                        <svg stroke="currenColor" width="18" heigth="18" viewBox="0 0 24 24"><use xlink:href="/img/icons.svg#lucide-banknote"></use></svg>
                        Seuil de regroupement des catégories
                    </label>
                    <input type="number" id="group-category" name="group-category" min="0" max="10000" step="100" default="0" required />
                    <input type="text" id="struct-complet" name="struct-complet" value={ApexChartStatsJson} hidden readonly required />

                    <div id="container-barChart" class="container-apex-chart">
                        <div id="barChart"></div>
                    </div>
                </section>

                <section id="category-stats">
                    <div class="overflow-auto">
                        <figure>
                            <h5>Détail complet par Catégorie</h5>
                            <table class="striped">
                                <thead>
                                    <tr>
                                        <th scope="col">Categorie</th>
                                        <th scope="col" class="right">Prix</th>
                                        <th scope="col" class="right">Quantite</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    for _, itemList := range CategoryList {
                                        <tr>
                                            <td>
                                                <span class={ "icomoon", itemList[3] }>&#x{ itemList[3] };</span> 
                                                <small> { itemList[0] }</small>
                                            </td>
                                            <td class="right">{ itemList[1] }</td>
                                            <td class="right">{ itemList[2] }</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>TOTAUX</td>
                                        for _, item := range TotalCategory {
                                            <td class="right">{ item }</td>
                                        }
                                    </tr>
                                </tfoot>
                            </table>
                        </figure>
                    </div>
                </section>
                @Nav("top", "/", "/img/icons.svg#feather-home", "Accueil", "contrast outline",
                    "/record/insert", "/img/icons.svg#lucide-notebook-pen", "Saisie", "contrast")
            </main>
            @BotScriptThemeSwitcher()
            // @BotScriptHTMXhandleError()
            <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
            @pieChart(IconCodePointList, ColorHEXList, CategoryLabelList, CategoryValueList)
            @barChart()
            // @columnChart(ApexChartStats)
            <script>
                document.getElementById('switchMode').addEventListener('click', function(evt){
                    switchMode = document.getElementById('switchMode').checked;
                    annee = document.getElementById('annee').value;
                    // console.log("/stats/"+switchMode+"-"+annee)
                    document.getElementById('form').action = "/stats/"+switchMode+"-"+annee;
                    document.getElementById("form").submit();
                });
                document.getElementById('annee').addEventListener('change', function(evt){
                    switchMode = document.getElementById('switchMode').value;
                    annee = document.getElementById('annee').value;
                    // console.log("/stats/"+switchMode+"-"+annee)
                    document.getElementById('form').action = "/stats/"+switchMode+"-"+annee;
                    document.getElementById("form").submit();
                });
            </script>
        </body>
    </html>
}

script pieChart(IconCodePointList []string, ColorHEXList []string, CategoryLabelList []string, CategoryValueList []float64) {
        var iconCodePointList = IconCodePointList;
        var jsIconCodePointList = [];
        for (let i = 0; i < iconCodePointList.length; i++) {
            var jsCodePoint
            jsCodePoint = parseInt(iconCodePointList[i], 16);
            jsCodePoint = String.fromCodePoint(jsCodePoint);
            jsIconCodePointList.push(jsCodePoint);
        };
        const icons = jsIconCodePointList // ['\ue887','\ue887','\ue531','\ue531','\ue531'] fonctionnel avec:: fontFamily: 'Material Icons'
        const colors = ColorHEXList // ['#F44336', '#E91E63', '#9C27B0', '#E91E63']
        const labels = CategoryLabelList
        const series = CategoryValueList // [4, 5, 41, 17, 15, 11, 4, 6, 4, 5]
        
        var options = {
            series: series,
            labels: labels,
            colors: colors,
            chart: {
                type: 'donut', 
                height: "100%", width: "100%" // responsive
            },
            plotOptions: {
                pie: {
                    donut: {
                        labels: {
                            show: true,
                            value: {color: "currentColor"},
                            total: {
                                show: true,
                                color: "currentColor",
                                formatter: function (w) {
                                    // console.log(w);
                                    const sum = w.globals.seriesTotals.reduce((partialSum, a) => partialSum + a, 0);
                                    return sum.toFixed(2);
                                },
                            },
                        }
                    }
                }
            },
            legend: {show: false},
            dataLabels: {
                formatter(val, opts) {return icons[opts.seriesIndex]},
                style: {fontSize: '20px', fontFamily: 'icomoon'},
            },
        };
        var chart = new ApexCharts(document.querySelector("#responsive-apex-chart"), options);
        chart.render();
}

script barChart() {
    function renderBarChart(){
        document.getElementById("barChart").remove();
        var div = document.createElement("div");
        div.id = "barChart";
        document.getElementById("container-barChart").appendChild(div);

        apexChartStatsString = document.getElementById("struct-complet").value;
        // console.log(apexChartStatsString);
        apexChartStats = JSON.parse(apexChartStatsString);
        // groupCategory = 0;
        groupCategory = parseInt(document.getElementById("group-category").value, 10);
        tempCategoryDict = {"name": "Groupe", "color": "#808080"};
        groupCategoryList = [];
        for (let i = 0; i < apexChartStats.Labels.length; i++) {
            groupCategoryList.push(0);
        }
        // console.log(groupCategory)

        var seriesList = []; // [{name: "a", data: [1,2]}, {name: "b", data: [3,4]}]
        for (let i = 0; i < apexChartStats.Series.length; i++) {
            temp = {};
            temp["name"] = apexChartStats.Series[i].Name;
            temp["color"]= apexChartStats.Series[i].Color;
            if (groupCategory > 0) {
                tempList = [];
                for (let j = 0; j < apexChartStats.Series[i].Values.length; j++) {
                    if (apexChartStats.Series[i].Values[j] < groupCategory) {
                        tempList.push("0");
                        groupCategoryList[j] += parseInt(apexChartStats.Series[i].Values[j], 10);
                        // console.log("i" + i + ", j" + j + ": " + apexChartStats.Series[i].Values[j])
                    } else {
                        tempList.push(apexChartStats.Series[i].Values[j]);
                    }
                }
                temp["data"] = tempList;
            } else {
                temp["data"] = apexChartStats.Series[i].Values;
            }
            seriesList.push(temp);
        };
        for (let i = 0; i < apexChartStats.Labels.length; i++) {
            groupCategoryList[i] = groupCategoryList[i].toString();
        }
        // console.log("groupCategoryList: " + groupCategoryList)
        tempCategoryDict["data"] = groupCategoryList;
        seriesList.push(tempCategoryDict);

        var options = {
            series: seriesList,
            chart: {
                type: 'bar',
                height: 550,
                width: "100%",
                stacked: true,
            },
            grid: {
                show: true,
                borderColor: 'currentColor',
                strokeDashArray: 3,
                position: 'front',
                xaxis: {
                    lines: {
                        show: true
                    }
                },
                yaxis: {
                    lines: {
                        show: false
                    }
                },
            },
            plotOptions: {
                bar: {
                    horizontal: true,
                    dataLabels: {
                        // hideOverflowingLabels: true,
                        // orientation: "vertical",
                        total: {
                            enabled: false
                            //     offsetX: 0,
                            //     // formatter: function (w) {
                            //     //     console.log(w);
                            //     //     // const sum = w.globals.seriesTotals.reduce((partialSum, a) => partialSum + a, 0);
                            //     //     // return sum.toFixed(2);
                            //     // },
                            //     style: {
                            //         fontSize: '13px',
                            //         fontWeight: 900
                            //     }
                        }
                    }
                },
            },
            dataLabels: {
                enabled: false,
            },
            // stroke: {
            //     width: 1,
            //     colors: ['#fff']
            // },
            title: {
                text: 'Dépenses par année',
                align: "center",
                style: {
                    color: "currentColor",
                    fontSize: '12px',
                },
            },
            xaxis: {
                categories: apexChartStats.Labels,
                labels: {
                    // rotate: -90,
                    // rotateAlways: true,
                    style: {
                        colors: "currentColor",
                        fontSize: '12px',
                    },
                    formatter: function (val) {
                        return val/1000 + "K"
                    }
                }
            },
            yaxis: {
                min: 0,
                max: 40000,
                // title: {
                //     text: undefined
                // },
                labels: {
                    // rotate: -90,
                    // rotateAlways: true,
                    offsetX: 10,
                    // offsetY: -50,
                    style: {
                        colors: "currentColor",
                        fontSize: '12px',
                    },
                }
            },
            tooltip: {
                theme: "dark",
            },
            fill: {
                opacity: 1
            },
            legend: {
                position: 'top',
                horizontalAlign: 'left',
                offsetX: 10,
                fontSize: '18px',
                fontFamily: 'icomoon',
                labels: {
                    colors: "currentColor",
                    // useSeriesColors: false
                },
            }
        };
        var chart = new ApexCharts(document.getElementById("barChart"), options); //.querySelector("#barChart")
        chart.render();
    };
    document.getElementById("group-category").addEventListener('input', function (evt) {
        renderBarChart();
    });
    renderBarChart();
}
